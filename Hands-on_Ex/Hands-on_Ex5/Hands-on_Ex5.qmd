---
title: "Hands-on Ex5"
author: "Jayexx Low"
date: "May 8, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

# Visualising and Analysing Text Data with R: tidytext methods

## Getting Started

### Loading Required R Package Libraries

The code chunk below loads the following libraries:

-   tidytext,
-   tidyverse (mainly readr, purrr, stringr, ggplot2)
-   widyr, - wordcloud and ggwordcloud,
-   textplot (required igraph, tidygraph and ggraph, )
-   DT,
-   lubridate and hms.

```{R}
pacman::p_load(tidytext, widyr, wordcloud, DT, ggwordcloud, textplot, lubridate, hms,
tidyverse, tidygraph, ggraph, igraph)
```

### Importing Multiple Text Files from Multiple Folders

#### Creating a folder list

```{R}
news20 <- "data/20news/"
```

#### Define a function to read all files from a folder into a data frame

```{R}
read_folder <- function(infolder) {
  tibble(file = dir(infolder, 
                    full.names = TRUE)) %>%
    mutate(text = map(file, 
                      read_lines)) %>%
    transmute(id = basename(file), 
              text) %>%
    unnest(text)
}
```

#### Reading in all the messages from the 20news folder

```{R}
raw_text <- tibble(folder = 
                     dir(news20, 
                         full.names = TRUE)) %>%
  mutate(folder_out = map(folder, 
                          read_folder)) %>%
  unnest(cols = c(folder_out)) %>%
  transmute(newsgroup = basename(folder), 
            id, text)
write_rds(raw_text, "data/rds/news20.rds")
```

::: {.callout-tip title="Things to learn from the code chunk above:"}
-   read_lines() of readr package is used to read up to n_max lines from a file.
-   map() of purrr package is used to transform their input by applying a function to each element of a list and returning an object of the same length as the input.
-   unnest() of dplyr package is used to flatten a list-column of data frames back out into regular columns.
-   mutate() of dplyr is used to add new variables and preserves existing ones;
-   transmute() of dplyr is used to add new variables and drops existing ones.
-   read_rds() is used to save the extracted and combined data frame as rds file for future use.
:::

## Initial EDA

The code chunk below gives the Figure that shows the frequency of messages by newsgroup.

```{R}
raw_text %>%
  group_by(newsgroup) %>%
  summarize(messages = n_distinct(id)) %>%
  ggplot(aes(messages, newsgroup)) +
  geom_col(fill = "lightblue") +
  labs(y = NULL)
```

## Introducing tidytext

-   Using tidy data principles in processing, analysing and visualising text data.
-   Much of the infrastructure needed for text mining with tidy data frames already exists in packages like 'dplyr', 'broom', 'tidyr', and 'ggplot2'.

Figure below shows the workflow using tidytext approach for processing and visualising text data.

![](images/image10-1.jpg)

### Removing header and automated email signitures

Notice that each message has some structure and extra text that we don't want to include in our analysis. For example, every message has a header, containing field such as "from:" or "in_reply_to:" that describe the message. Some also have automated email signatures, which occur after a line like "--".

```{R}
cleaned_text <- raw_text %>%
  group_by(newsgroup, id) %>%
  filter(cumsum(text == "") > 0,
         cumsum(str_detect(
           text, "^--")) == 0) %>%
  ungroup()
```

::: {.callout-tip title="Things to learn from the code chunk above:"}
-   cumsum() of base R is used to return a vector whose elements are the cumulative sums of the elements of the argument. 
-   str_detect() from    stringr is used to detect the presence or absence of a pattern in a string.
:::

### Removing lines with nested text representing quotes from other users.

In this code chunk below, regular expressions are used to remove with nested text representing quotes from other users.

```{R}
cleaned_text <- cleaned_text %>%
  filter(str_detect(text, "^[^>]+[A-Za-z\\d]")
         | text == "",
         !str_detect(text, 
                     "writes(:|\\.\\.\\.)$"),
         !str_detect(text, 
                     "^In article <")
  )
```

::: {.callout-tip title="Things to learn from the code chunk above:"}
-   str_detect() from stringr is used to detect the presence or absence of a pattern in a string. 
-   filter() of dplyr package is used to subset a data frame, retaining all rows that satisfy the specified conditions.
:::

### Text Data Processing

In this code chunk below, unnest_tokens() of tidytext package is used to split the dataset into tokens, while stop_words() is used to remove stop-words.

```{R}
usenet_words <- cleaned_text %>%
  unnest_tokens(word, text) %>%
  filter(str_detect(word, "[a-z']$"),
         !word %in% stop_words$word)
```

Now that we've removed the headers, signatures, and formatting, we can start exploring common words. For starters, we could find the most common words in the entire dataset, or within particular newsgroups.

```{R}
usenet_words %>%
  count(word, sort = TRUE)
```

Instead of counting individual word, you can also count words within by newsgroup by using the code chunk below.

```{R}
words_by_newsgroup <- usenet_words %>%
  count(newsgroup, word, sort = TRUE) %>%
  ungroup()
```

### Visualising Words in newsgroups

In this code chunk below, wordcloud() of wordcloud package is used to plot a static wordcloud.

```{R}
wordcloud(words_by_newsgroup$word,
          words_by_newsgroup$n,
          max.words = 300)
```

A DT table can be used to complement the visual discovery.

```{R}
DT::datatable(words_by_newsgroup, filter = 'top') %>% 
  formatStyle(0, 
              target = 'row', 
              lineHeight='25%')
```

### Visualising Words in newsgroups

The wordcloud below is plotted by using ggwordcloud package

```{R}
set.seed(1234)

words_by_newsgroup %>%
  filter(n > 0) %>%
ggplot(aes(label = word,
           size = n)) +
  geom_text_wordcloud() +
  theme_minimal() +
  facet_wrap(~newsgroup)
```

## Basic Concept of TF-IDF

-   tf--idf, short for term frequency--inverse document frequency, is a numerical statistic that is intended to reflect how important a word is to a document in a collection of corpus.

![](images/image10-4-01.jpg)

### Computing tf-idf within newsgroups

The code chunk below uses bind_tf_idf() of tidytext to compute and bind the term frequency, inverse document frequency and ti-idf of a tidy text dataset to the dataset.

```{R}
tf_idf <- words_by_newsgroup %>%
  bind_tf_idf(word, newsgroup, n) %>%
  arrange(desc(tf_idf))
```

###Visualising tf-idf as interactive table

The code chunk below uses datatable() of DT package to create a html table that allows pagination of rows and columns.

```{R}
DT::datatable(tf_idf, filter = 'top') %>% 
  formatRound(columns = c('tf', 'idf', 
                          'tf_idf'), 
              digits = 3) %>%
  formatStyle(0, 
              target = 'row', 
              lineHeight='25%')
```

::: {.callout-tip title="Things to learn from the code chunk above:"}
-   filter() argument is used to turn control the filter UI. 
-   formatRound() is used to customise the values format. The argument digits define the number of decimal places.  
-   formatStyle() is used to customise the output table. In this example, the arguments target and lineHeight are used to reduce the line height by 25%.
:::

To learn more about customising DT's table, visit this [link](https://rstudio.github.io/DT/functions.html).

### Visualising tf-idf within newsgroups

Facet bar charts technique is used to visualise the tf-idf values of science related newsgroup.

```{R}
tf_idf %>%
  filter(str_detect(newsgroup, "^sci\\.")) %>%
  group_by(newsgroup) %>%
  slice_max(tf_idf, 
            n = 12) %>%
  ungroup() %>%
  mutate(word = reorder(word, 
                        tf_idf)) %>%
  ggplot(aes(tf_idf, 
             word, 
             fill = newsgroup)) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~ newsgroup, 
             scales = "free") +
  labs(x = "tf-idf", 
       y = NULL)
```

### Counting and correlating pairs of words with the widyr package

-   To count the number of times that two words appear within the same document, or to see how correlated they are.
-   Most operations for finding pairwise counts or correlations need to turn the data into a wide matrix first.
-   widyr package first 'casts' a tidy dataset into a wide matrix, performs an operation such as a correlation on it, then re-tidies the result.

![](images/image10-2-01.jpg)

In this code chunk below, pairwise_cor() of widyr package is used to compute the correlation between newsgroup based on the common words found.

```{R}
newsgroup_cors <- words_by_newsgroup %>%
  pairwise_cor(newsgroup, 
               word, 
               n, 
               sort = TRUE)
```

### Visualising correlation as a network

Now, we can visualise the relationship between newgroups in network graph as shown below.

```{R}
set.seed(2017)

newsgroup_cors %>%
  filter(correlation > .025) %>%
  graph_from_data_frame() %>%
  ggraph(layout = "fr") +
  geom_edge_link(aes(alpha = correlation, 
                     width = correlation)) +
  geom_node_point(size = 6, 
                  color = "lightblue") +
  geom_node_text(aes(label = name),
                 color = "red",
                 repel = TRUE) +
  theme_void()
```

### Bigram

In this code chunk below, a bigram data frame is created by using unnest_tokens() of tidytext.

```{R}
bigrams <- cleaned_text %>%
  unnest_tokens(bigram, 
                text, 
                token = "ngrams", 
                n = 2)
bigrams
```

### Counting bigrams

The code chunk is used to count and sort the bigram data frame ascendingly.

```{R}
bigrams_count <- bigrams %>%
  filter(bigram != 'NA') %>%
  count(bigram, sort = TRUE)

bigrams_count
```

### Cleaning bigram

The code chunk below is used to seperate the bigram into two words.

```{R}
bigrams_separated <- bigrams %>%
  filter(bigram != 'NA') %>%
  separate(bigram, c("word1", "word2"), 
           sep = " ")

bigrams_filtered <- bigrams_separated %>%
  filter(!word1 %in% stop_words$word) %>%
  filter(!word2 %in% stop_words$word)

bigrams_filtered
```

### Counting the bigram again

```{R}
bigram_counts <- bigrams_filtered %>% 
  count(word1, word2, sort = TRUE)
```

### Create a network graph from bigram data frame

In the code chunk below, a network graph is created by using graph_from_data_frame() of igraph package.

```{R}
bigram_graph <- bigram_counts %>%
  filter(n > 3) %>%
  graph_from_data_frame()
bigram_graph
```

### Visualizing a network of bigrams with ggraph

In this code chunk below, ggraph package is used to plot the bigram.

```{R}
set.seed(1234)

ggraph(bigram_graph, layout = "fr") +
  geom_edge_link() +
  geom_node_point() +
  geom_node_text(aes(label = name), 
                 vjust = 1, 
                 hjust = 1)
```

### Visualizing a network of bigrams with ggraph

In this code chunk below, ggraph package is used to plot the bigram.

```{R}
set.seed(1234)

a <- grid::arrow(type = "closed", 
                 length = unit(.15,
                               "inches"))

ggraph(bigram_graph, 
       layout = "fr") +
  geom_edge_link(aes(edge_alpha = n), 
                 show.legend = FALSE,
                 arrow = a, 
                 end_cap = circle(.07,
                                  'inches')) +
  geom_node_point(color = "lightblue", 
                  size = 5) +
  geom_node_text(aes(label = name), 
                 vjust = 1, 
                 hjust = 1) +
  theme_void()
```

## References
