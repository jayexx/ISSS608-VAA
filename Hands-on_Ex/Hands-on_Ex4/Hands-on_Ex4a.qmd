---
title: "Hands-on Ex4a"
author: "Jayexx Low"
date: "April 29, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

# Visual Statistical Analysis

## Visual Statistical Analysis with GGstatsplot

[ggstatsplot](https://indrajeetpatil.github.io/ggstatsplot/) is an extension of ggplot2 package for creating graphics with details from statistical tests included in the information-rich plots themselves.

-   To provide alternative statistical inference methods by default.
-   To follow best practices for statistical reporting. For all statistical tests reported

### Installing & loading required libraries

The code chunk below installs and launches the tidyverse, ggdist, ggridges, colourspace & ggthemes packages into R environment

```{r}
pacman:: p_load(ggstatsplot, tidyverse)
```

### Importing the data

The code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package, which is part of the tidyverse package.

```{r}
exam <- read_csv("data/Exam_data.csv")
```

### One-sample test: gghistostats() method

In the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores.

```{R}
set.seed(1234)

gghistostats(
  data = exam,
  x = ENGLISH,
  type = "bayes",
  test.value = 60,
  xlab = "English scores"
)
```

Default information: - statistical details - Bayes Factor - sample sizes - distribution summary

### Bayes Factor

A Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.

That's because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.

When we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10. It can be defined mathematically as

![](https://r4va.netlify.app/chap10/img/image5.jpg)

The [Schwarz criterion/BIC](https://www.statisticshowto.com/bayesian-information-criterion/) is one of the easiest ways to calculate rough approximation of the Bayes Factor.

A Bayes Factor can be any positive number. One of the most common interpretations is this one---first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagenmakers in 2013:

![](https://r4va.netlify.app/chap10/img/image6.jpg)

### Two-sample mean test: ggbetweenstats()

In the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.

```{R}
ggbetweenstats(
  data = exam,
  x = GENDER, 
  y = MATHS,
  type = "np",
  messages = FALSE
)
```

Default information: - statistical details - Bayes Factor - sample sizes - distribution summary

### Oneway ANOVA Test: ggbetweenstats() method

In the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.

```{R}
ggbetweenstats(
  data = exam,
  x = RACE, 
  y = ENGLISH,
  type = "p",
  mean.ci = TRUE, 
  pairwise.comparisons = TRUE, 
  pairwise.display = "s",
  p.adjust.method = "fdr",
  messages = FALSE
)
```

-   "ns" → only non-significant
-   "s" → only significant
-   "all" → everything

#### ggbetweenstats - Summary of tests

![](https://r4va.netlify.app/chap10/img/image7.jpg)

![](https://r4va.netlify.app/chap10/img/image8.jpg)

![](https://r4va.netlify.app/chap10/img/image9.jpg)

### Significant Test of Correlation: ggscatterstats()

In the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.

```{R}
ggscatterstats(
  data = exam,
  x = MATHS,
  y = ENGLISH,
  marginal = FALSE,
  )
```

### Significant Test of Association (Depedence) : ggbarstats() methods

In the code chunk below, the Maths scores is binned into a 4-class variable by using cut().

```{R}
exam1 <- exam %>% 
  mutate(MATHS_bins = 
           cut(MATHS, 
               breaks = c(0,60,75,85,100))
)
```

In this code chunk below ggbarstats() is used to build a visual for Significant Test of Association

```{R}
ggbarstats(exam1, 
           x = MATHS_bins, 
           y = GENDER)
```

## Visualising Models with parameters package

In this section, you will learn how to visualise model diagnostic and model parameters by using parameters package.

Toyota Corolla case study will be used. The purpose of study is to build a model to discover factors affecting prices of used-cars by taking into consideration a set of explanatory variables.

### Installing & loading required libraries

The code chunk below installs and launches the tidyverse, ggdist, ggridges, colourspace & ggthemes packages into R environment

```{r}
pacman::p_load(readxl, performance, parameters, see, qqplotr)
```

### Importing data

In the code chunk below, read_xls() of readxl package is used to import the data worksheet of ToyotaCorolla.xls workbook into R.

```{R}
car_resale <- read_xls("data/ToyotaCorolla.xls", "data")
car_resale
```

Notice that the output object car_resale is a tibble data frame.

### Multiple Regression Model using lm()

The code chunk below is used to calibrate a multiple linear regression model by using lm() of Base Stats of R.

```{R}
model <- lm(Price ~ Age_08_04 + Mfg_Year + KM + 
              Weight + Guarantee_Period, data = car_resale)
model
```

### Model Diagnostic: checking for multicolinearity:

In the code chunk, check_collinearity() of performance package.

```{R}
check_collinearity(model)
```

```{R}
check_c <- check_collinearity(model)
plot(check_c)
```

### Model Diagnostic: checking normality assumption

In the code chunk, check_normality() of performance package.

```{R}
model1 <- lm(Price ~ Age_08_04 + KM + 
              Weight + Guarantee_Period, data = car_resale)

check_n <- check_normality(model1)

plot(check_n)
```

### Model Diagnostic: Check model for homogeneity of variances

In the code chunk, check_heteroscedasticity() of performance package.

```{R}
check_h <- check_heteroscedasticity(model1)

plot(check_h)
```

### Model Diagnostic: Complete check

We can also perform the complete by using check_model().

```{R}
#| fig-height: 12
check_model(model1)
```

### Visualising Regression Parameters: see methods

In the code below, plot() of see package and parameters() of parameters package is used to visualise the parameters of a regression model.

```{R}
plot(parameters(model1))
```

### Visualising Regression Parameters: ggcoefstats() methods

In the code below, ggcoefstats() of ggstatsplot package to visualise the parameters of a regression model.

```{R}
ggcoefstats(model1, 
            output = "plot")
```
