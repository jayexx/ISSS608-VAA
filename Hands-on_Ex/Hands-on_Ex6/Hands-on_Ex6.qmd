---
title: "Hands-on Ex6"
author: "Jayexx Low"
date: "May 15, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

# Modelling, Visualising and Analysing Network Data with R

## Overview

This hands-on exercise will cover how to model, analyse and visualise network data using R, with the following key areas:

-   create graph object data frames, manipulate them using appropriate functions of dplyr, lubridate, and tidygraph,
-   build network graph visualisation using appropriate functions of ggraph,
-   compute network geometrics using tidygraph,
-   build advanced graph visualisation by incorporating the network geometrics, and
-   build interactive network visualisation using visNetwork package.

## Getting Started

### Installing and launching R packages

In this hands-on exercise, 4 network data modelling and visualisation packages will be installed and launched. They are igraph, tidygraph, ggraph and visNetwork. Beside these 4 packages, tidyverse and lubridate, specially designed to handle and wrangle time data, will be installed and launched too.

```{r}
pacman::p_load(igraph, tidygraph, ggraph, 
               visNetwork, lubridate, clock,
               tidyverse, graphlayouts)
```

## The Data

The data sets used in this hands-on exercise is from an oil exploration and extraction company. There are two data sets. One contains the nodes data and the other contains the edges (also know as link) data.

### Importing network data from files

In this step, you will import GAStech_email_node.csv and GAStech_email_edges-v2.csv into RStudio environment by using read_csv() of readr package.

```{r}
GAStech_nodes <- read_csv("data/GAStech_email_node.csv")
GAStech_edges <- read_csv("data/GAStech_email_edge-v2.csv")
```

#### The edges data

GAStech-email_edges.csv which consists of two weeks of 9063 emails correspondances between 55 employees.

```{r}
glimpse(GAStech_edges)
```

#### The nodes data

GAStech_email_nodes.csv which consist of the names, department and title of the 55 employees

```{r}
glimpse(GAStech_nodes)
```

::: {.callout-tip title="Warning"}
The output report of GAStech_edges above reveals that the SentDate is treated as "Character" data type instead of date data type. This is an error! Before we continue, it is important for us to change the data type of SentDate field back to "Date"" data type.
:::

### Wrangling time

The code chunk below will be used to perform the changes.

```{r}
GAStech_edges <- GAStech_edges %>%
  mutate(SendDate = dmy(SentDate)) %>%
  mutate(Weekday = wday(SentDate,
                        label = TRUE,
                        abbr = FALSE))
```

::: {.callout-tip title="Things to learn from the code chunk above:"}
-   both dmy() and wday() are functions of lubridate package. lubridate is an R package that makes it easier to work with dates and times.
-   dmy() transforms the SentDate to Date data type.
-   wday() returns the day of the week as a decimal number or an ordered factor if label is TRUE. The argument abbr is FALSE keep the daya spells in full, i.e. Monday. The function will create a new column in the data.frame i.e. Weekday and the output of wday() will save in this newly created field.
-   the values in the Weekday field are in ordinal scale.
:::

### Reviewing the revised date fields

Table below shows the data structure of the reformatted GAStech_edges data frame

```{r}
glimpse(GAStech_edges)
```

### Wrangling attributes

A close examination of GAStech_edges data.frame reveals that it consists of individual e-mail flow records. This is not very useful for visualisation.

In view of this, the individual records will be aggregated the by date, senders, receivers, main subject and day of the week.

```{r}
GAStech_edges_aggregated <- GAStech_edges %>%
  filter(MainSubject == "Work related") %>%
  group_by(source, target, Weekday) %>%
    summarise(Weight = n()) %>%
  filter(source!=target) %>%
  filter(Weight > 1) %>%
  ungroup()
```

::: {.callout-tip title="Things to learn from the code chunk above:"} 

-   four functions from dplyr package are used. 
-   They are: filter(), group(), summarise(), and ungroup(). 
-   The output data.frame is called GAStech_edges_aggregated. 
-   A new field called Weight has been added in GAStech_edges_aggregated. 
:::

### Reviewing the revised edges file

Table below shows the data structure of the reformatted GAStech_edges data frame

```{r}
glimpse(GAStech_edges_aggregated)
```

## Creating network objects using *tidygraph*

This section, will cover how to create a graph data model by using tidygraph package. The package provides a tidy API for graph/network manipulation. While network data itself is not tidy, it can be envisioned as two tidy tables, one for node data and one for edge data. tidygraph provides a way to switch between the two tables and provides dplyr verbs for manipulating them. Furthermore it provides access to a lot of graph algorithms with return values that facilitate their use in a tidy workflow.

Before getting started, the following 2 articles should be read:

-   [Introducing tidygraph](https://www.data-imaginist.com/2017/introducing-tidygraph/)
-   [tidygraph 1.1 - A tidy hope](https://www.data-imaginist.com/posts/2018-02-12-tidygraph-1-1-a-tidy-hope/index.html)

### The tbl_graph object

Two functions of tidygraph package can be used to create network objects, they are:

-   tbl_graph() creates a tbl_graph network object from nodes and edges data.

-   as_tbl_graph() converts network data and objects to a tbl_graph network. Below are network data and objects supported by as_tbl_graph()

-   a node data.frame and an edge data.frame,

-   data.frame, list, matrix from base,

-   igraph from igraph,

-   network from network,

-   dendrogram and hclust from stats,

-   Node from data.tree,

-   phylo and evonet from ape, and

-   graphNEL, graphAM, graphBAM from graph (in Bioconductor).

### The dplyr verbs in tidygraph

-   activate() verb from tidygraph serves as a switch between tibbles for nodes and edges. All dplyr verbs applied to tbl_graph object are applied to the active tibble.

```         
iris_tree <- iris_tree %>%
  activate(nodes) %>%
  mutate(Species = ifelse(leaf, as.character(iris$Species)[label], NA)) %>%
  activate(edges) %>%
  mutate(to_setose = .N()$Species[to] == 'setosa')
iris_tree
```

-   In the above the .N() function is used to gain access to the node data while manipulating the edge data. Similarly .E() will give you the edge data and .G() will give you the tbl_graph object itself.

### Using tbl_graph() to build tidygraph data model.

In this section, you will use tbl_graph() of tinygraph package to build an tidygraph's network graph data.frame.

Before typing the codes, you are recommended to review to reference guide of tbl_graph()

```{r}
GAStech_graph <- tbl_graph(nodes = GAStech_nodes,
                           edges = GAStech_edges_aggregated, 
                           directed = TRUE)
```

### Reviewing the output tidygraph's graph object

```{r}
GAStech_graph
```

### Reviewing the output tidygraph's graph object

-   The output above reveals that GAStech_graph is a tbl_graph object with 54 nodes and 4541 edges.
-   The command also prints the first six rows of "Node Data" and the first three of "Edge Data".
-   It states that the Node Data is active. The notion of an active tibble within a tbl_graph object makes it possible to manipulate the data in one tibble at a time.

### Changing the active object

The nodes tibble data frame is activated by default, but you can change which tibble data frame is active with the activate() function. Thus, if we wanted to rearrange the rows in the edges tibble to list those with the highest "weight" first, we could use activate() and then arrange().

For example,

```{r}
GAStech_graph %>%
  activate(edges) %>%
  arrange(desc(Weight))
```

## Plotting Static network graphs using ggraph

ggraph is an extension of ggplot2, making it easier to carry over basic ggplot skills to the design of network graphs.

As in all network graph, there are three main aspects to a ggraph's network graph, they are:

-   nodes,
-   edges and
-   layouts.

For a comprehensive discussion of each of this aspect of graph, please refer to their respective vignettes provided.

### Plotting a basic network graph

The code chunk below uses ggraph(), geom-edge_link() and geom_node_point() to plot a network graph by using GAStech_graph. Before your get started, it is advisable to read their respective reference guide at least once.

```{r}
ggraph(GAStech_graph) +
  geom_edge_link() +
  geom_node_point()
```
::: {.callout-tip title="Things to learn from the code chunk above:"} 
The basic plotting function is ggraph(), which takes the data to be used for the graph and the type of layout desired. Both of the arguments for ggraph() are built around igraph. Therefore, ggraph() can use either an igraph object or a tbl_graph object.
:::

### Changing the default network graph theme
In this section, you will use theme_graph() to remove the x and y axes. Before your get started, it is advisable to read itâ€™s reference guide at least once.

```{r}
g <- ggraph(GAStech_graph) + 
  geom_edge_link(aes()) +
  geom_node_point(aes())

g + theme_graph()
```

::: {.callout-tip title="Things to learn from the code chunk above:"}
ggraph introduces a special ggplot theme that provides better defaults for network graphs than the normal ggplot defaults. theme_graph(), besides removing axes, grids, and border, changes the font to Arial Narrow (this can be overridden).
The ggraph theme can be set for a series of plots with the set_graph_style() command run before the graphs are plotted or by using theme_graph() in the individual plots.
:::

### Changing the coloring of the plot

Furthermore, theme_graph() makes it easy to change the coloring of the plot.

```{r}
g <- ggraph(GAStech_graph) + 
  geom_edge_link(aes(colour = 'grey50')) +
  geom_node_point(aes(colour = 'grey40'))


g + theme_graph(background = 'grey10',
                text_colour = 'white')
```

### Working with ggraph's layouts

ggraph support many layout for standard used, they are: star, circle, nicely (default), dh, gem, graphopt, grid, mds, spahere, randomly, fr, kk, drl and lgl. Figures below and on the right show layouts supported by ggraph().

![](images/image4.jpg)

### Fruchterman and Reingold layout
The code chunks below will be used to plot the network graph using Fruchterman and Reingold layout.

```{r}
g <- ggraph(GAStech_graph, 
            layout = "fr") +
  geom_edge_link(aes()) +
  geom_node_point(aes())

g + theme_graph()
```
::: {.callout-tip title="Thing to learn from the code chunk above:"}
-   layout argument is used to define the layout to be used.
:::

### Modifying network nodes

In this section, you will colour each node by referring to their respective departments.

```{r}
g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes()) +
  geom_node_point(aes(colour = Department, 
                      size = 3))

g + theme_graph()
```

### Modifying edges
In the code chunk below, the thickness of the edges will be mapped with the Weight variable.

```{r}
g <- ggraph(GAStech_graph, 
            layout = "nicely") +
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 3)

g + theme_graph()
```
::: {.callout-tip title="Things to learn from the code chunks above:"}

-   geom_edge_link draws edges in the simplest way - as straight lines between the start and end nodes. But, it can do more that that. In the example above, argument width is used to map the width of the line in proportional to the Weight attribute and argument alpha is used to introduce opacity on the line.
:::

## Creating facet graphs

## Network Metrics Analysis

## Building Interactive Network Graph with visNetwork

## Reference
