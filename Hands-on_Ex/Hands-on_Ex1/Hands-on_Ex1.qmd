---
title: "Hands-on_Ex1"
author: "Jayexx Low"
---

## Overview

In this hands-on exercise, the basic principles and essential components of ggplot2 are visited. At the same time, hands-on experience is gained through using these components to plot statistical graphics based on the principles of Layered Grammar of Graphics.

## Getting Started

### Install & Load Libraries

The code chunk below installs and launches the tidyverse package into R environment

```{r}
pacman:: p_load(tidyverse)
```

### Importing the data

The code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package, which is part of the tidyverse package.

```{r}
exam_data <- read_csv("data/Exam_data.csv")
```

Note that starting the code with \|# eval: false display the code chunk without running the code

## GGPlot Introduction

GGplot2 is an R package for declaratively creating data-driven graphics based on The Grammar of Graphics

It is also part of the tidyverse family specially designed for visual exploration and communication.

For more detail, visit [ggplot2 link](https://ggplot2.tidyverse.org/).

### R graphics Vs GGPlot

A comparison of Rgraphics against GG Plot is illustrated in the following code chunk

::: panel-tabset
## Rgraphics (Histogram)

```{r}
hist(exam_data$MATHS)
```

## GGPlot

```{r}
ggplot(data=exam_data, aes(x = MATHS)) +
  geom_histogram(bins=10, 
                 boundary = 100,
                 color="black", 
                 fill="grey") +
  ggtitle("Distribution of Maths scores")
```
:::

## Grammar of Graphics

Before getting started using ggplot2, it is important to understand the principles of Grammer of Graphics.

Grammar of Graphics is a general scheme for data visualization which breaks up graphs into semantic components such as scales and layers. It was introduced by Leland Wilkinson in 1999 Grammar of Graphics, Springer. The grammar of graphics is an answer to a question:

What is a statistical graphic?

In the nutshell, Grammar of Graphics defines the rules of structuring mathematical and aesthetic elements into a meaningful graph.

There are two principles in Grammar of Graphics, they are:

-   Graphics = distinct layers of grammatical elements
-   Meaningful plots through aesthetic mapping

A good grammar of graphics will provide insight into the composition of complicated graphics, and reveal unexpected connections between seemingly different graphics (Cox 1978). It also provides a strong foundation for understanding a diverse range of graphics. Furthermore, it may provide guidance on what a well-formed or correct graphic looks like, but there could still be many grammatically correct but nonsensical graphics.

### Layered Grammar of Graphics

ggplot2 is an implementation of Leland Wilkinson's Grammar of Graphics. There are 7 layers of grammar, aka Essential Grammatical Elements, described as follows.

-   **Data**: The dataset being plotted.
-   **Aesthetics**: take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.
-   **Geometrics**: The visual elements used for our data, such as point, bar or line.
-   **Facets**: splits the data into subsets to create multiple variations of the same graph (paneling, multiple plots).
-   **Statistics**: statistical transformations that summarise data (e.g. mean, confidence intervals).
-   **Coordinate systems**: define the plane on which data are mapped on the graphic.
-   **Themes**: modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background.

### GGPlot2 Essential Grammatical Elements: Data

With ggplot() a blank canvas for the data visualisation can be first intialised, as shown in the following code chunk.

```{r}
ggplot(data=exam_data)
```

### GGPlot2 Essential Grammatical Elements: Aesthetics mappings

Aesthetic mappings utilises attributes of the data and and use them to influence visual characteristics, such as position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.

All aesthetics of a plot are specified in the aes() function call (each geom layer can have its own aes specification)

The code chunk below illustrates the use of aes() to add a simple aesthetic element (the x axis and label) into the plot.

```{R}
ggplot(data=exam_data, 
       aes(x= MATHS))
```

### GGPlot2 Essential Grammatical Elements: Geometrics

Geometric objects are the centerpiece graphical marks placed on a plot. Examples include:

-   geom_point for drawing individual points (e.g., a scatter plot)
-   geom_line for drawing lines (e.g., for a line charts)
-   geom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)
-   geom_bar for drawing bars (e.g., for bar charts)
-   geom_histogram for drawing binned values (e.g. a histogram)
-   geom_polygon for drawing arbitrary shapes
-   geom_map for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).

#### Geometric object: Bar charts

The code chunk below plots a bar chart by using geom_bar().

```{R}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar()
```

#### Geometric object: Dotplot

In a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.

In the code chunk below, geom_dotplot() of ggplot2 is used to plot a dot plot.

```{R}
ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot(dotsize = 0.5)
```

Rather than auto-assignment, the bin width could also be specified.

Since each dot represents 1 observation, the y-axis is not meaningful and becomes misleading instead.

To address the above, the code chunk specifies the bin width, and also removes the y-axis using scale_y_continuous().

```{R}
ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot(binwidth=2.5,         
               dotsize = 0.5) +      
  scale_y_continuous(NULL,           
                     breaks = NULL) 
```

#### Geometric object: Histograms

In the code chunk below, geom_histogram() is used to create a simple histogram by using values in MATHS field of exam_data.

```{R}
ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_histogram()
```

#### Geometric object modification: geom()

In the code chunk below,

-   bins argument is used to change the number of bins to 20,
-   fill argument is used to shade the histogram with light blue color, and
-   color argument is used to change the outline colour of the bars in black

```{R}
ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20,            
                 color="black",      
                 fill="light blue")  
```

#### Geometric object modification: aes()

The code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of aesthetic().

```{R}
ggplot(data=exam_data, 
       aes(x= MATHS, 
           fill = GENDER)) +
  geom_histogram(bins=20, 
                 color="grey30")
```

#### Geometric object: Kernel Density Estimate (KDE)

geom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.

It is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.

The code below plots the distribution of Maths scores in a kernel density estimate plot.

```{R}
ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_density()           
```

The code chunk below plots two kernel density lines by using colour or fill arguments of aes()

```{R}
ggplot(data=exam_data, 
       aes(x = MATHS, 
           colour = GENDER)) +
  geom_density()
```

#### Geometric object: Boxplot

geom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all "outlying" points individually. The code chunk below plots boxplots by using geom_boxplot().

```{R}
ggplot(data=exam_data, 
       aes(y = MATHS,       
           x= GENDER)) +    
  geom_boxplot()            
```

Notches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.

The code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.

```{R}
ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER)) +
  geom_boxplot(notch=TRUE)
```

#### Geometric object: Violin Plot

geom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it's easier to compare several distributions since they're placed side by side.

The code below plot the distribution of Maths score by gender in violin plot.

```{R}
ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER)) +
  geom_violin()
```

#### Geometric object: Points

geom_point() is especially useful for creating scatterplot.

The code chunk below plots a scatterplot showing the Maths and English grades of pupils by using geom_point().

```{R}
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point()            
```

#### Geometric object: combination

The code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().

```{R}
ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER)) +
  geom_boxplot() +                    
  geom_point(position="jitter", 
             size = 0.5)        
```

### GGPlot2 Essential Grammatical Elements: Statistics

The Statistics functions statistically transform data, usually as some form of summary. For example:

-   frequency of values of a variable (bar graph)
    -   a mean
    -   a confidence limit
-   There are two ways to use these functions:
    -   add a stat_() function and override the default geom, or
    -   add a geom_() function and override the default stat.

#### Stat function: stat_summary()

The boxplots below are incomplete because the positions of the means were not shown.

```{R}
ggplot(data=exam_data, 
       aes(y = MATHS, x= GENDER)) +
  geom_boxplot()
```

Mean values can be depicted by a red dot, using stat_summary() and overriding the default geom(), to address the above with the following code chunk.

```{R}
ggplot(data=exam_data, 
       aes(y = MATHS, x= GENDER)) +
  geom_boxplot() +
  stat_summary(geom = "point",       
               fun.y="mean",         
               colour ="red",        
               size=4)
```

#### Stat function: using geom()

The code chunk below adding mean values by using geom_() function and overriding the default stat.

```{R}
ggplot(data=exam_data, 
       aes(y = MATHS, x= GENDER)) +
  geom_boxplot() +
  geom_point(stat="summary",        
             fun.y="mean",           
             colour ="red",          
             size=4)          
```

#### Stat function: geom_smooth() to plot best fit curve

The interpretability of the scatterplot showing the relationship of Maths and English grades of pupils can be improved by adding a best fit curve.

In the code chunk below, geom_smooth() is used to plot a best fit curve on the scatterplot.

```{R}
ggplot(data=exam_data, 
       aes(x= MATHS, y=ENGLISH)) +
  geom_point() +
  geom_smooth(size=0.5)
```

The default method used is loess.

The default smoothing method can be overridden as shown below.

```{R}
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5)
```

### GGPlot2 Essential Grammatical Elements: Facets

Facetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: facet_grid() and facet_wrap.

#### Facet functions: facet_wrap()

facet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.

The code chunk below plots a trellis plot using facet-wrap().

```{R}
ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20) +
    facet_wrap(~ CLASS)
```

#### Facet functions: facet_grid()

facet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.

The code chunk below plots a trellis plot using facet_grid().

```{R}
ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20) +
    facet_grid(~ CLASS)
```

### GGPlot2 Essential Grammatical Elements: Coordinate systems

The Coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:

-   [`coord_cartesian()`](https://ggplot2.tidyverse.org/reference/coord_cartesian.html): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out).
-   [`coord_flip()`](https://ggplot2.tidyverse.org/reference/coord_flip.html): a cartesian system with the x and y flipped.
-   [`coord_fixed()`](https://ggplot2.tidyverse.org/reference/coord_fixed.html): a cartesian system with a "fixed" aspect ratio (e.g. 1.78 for a "widescreen" plot).
-   [`coord_quickmap()`](https://ggplot2.tidyverse.org/reference/coord_map.html): a coordinate system that approximates a good aspect ratio for maps.

#### Coordinates function: coord_flip()

By the default, the bar chart of ggplot2 is in vertical form.

```{R}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar()
```

The code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip().

```{R}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip()
```

#### Coordinates function: coord_cartesian()

The scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.

```{R}
ggplot(data=exam_data, 
       aes(x= MATHS, y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, size=0.5)
```

The code chunk below fixed both the y-axis and x-axis range from 0-100.

```{R}
ggplot(data=exam_data, 
       aes(x= MATHS, y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))
```

### GGPlot2 Essential Grammatical Elements: Themes

Themes control elements of the graph not related to the data. For example:

-   background colour
-   size of fonts
-   gridlines
-   colour of labels
-   Built-in themes include: - theme_gray() (default) - theme_bw() - theme_classic()

A list of theme can be found at this link. Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).

The code chunk below plot a horizontal bar chart using theme_gray().

```{R}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_gray()
```

A horizontal bar chart plotted using theme_classic().

```{R}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_classic()
```
A horizontal bar chart plotted using theme_minimal().

```{R}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_minimal()
```

## References

-   Hadley Wickham (2023) ggplot2: Elegant Graphics for Data Analysis. Online 3rd edition.
-   Winston Chang (2013) R Graphics Cookbook 2nd edition. Online version.
-   Healy, Kieran (2019) Data Visualization: A practical introduction. Online version
-   Learning ggplot2 on Paper – Components
-   Learning ggplot2 on Paper – Layer
-   Learning ggplot2 on Paper – Scale