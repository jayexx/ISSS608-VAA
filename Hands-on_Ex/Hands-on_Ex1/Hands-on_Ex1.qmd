---
title: "Hands-on_Ex1"
author: "Jayexx Low"
---

## Overview

In this hands-on exercise, the basic principles and essential components of ggplot2 are visited. At the same time, hands-on experience is gained through using these components to plot statistical graphics based on the principles of Layered Grammar of Graphics.

## Getting Started

### Install & Load Libraries

The code chunk below installs and launches the tidyverse package into R environment

```{r}
pacman:: p_load(tidyverse)
```

### Importing the data

The code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package, which is part of the tidyverse package.

```{r}
exam_data <- read_csv("data/Exam_data.csv")
```

Note that starting the code with \|# eval: false display the code chunk without running the code

## GGPlot Introduction

GGplot2 is an R package for declaratively creating data-driven graphics based on The Grammar of Graphics

It is also part of the tidyverse family specially designed for visual exploration and communication.

For more detail, visit [ggplot2 link](https://ggplot2.tidyverse.org/).

### R graphics Vs GGPlot

A comparison of Rgraphics against GG Plot is illustrated in the following code chunk

::: panel-tabset
## Rgraphics (Histogram)

```{r}
hist(exam_data$MATHS)
```

## GGPlot

```{r}
ggplot(data=exam_data, aes(x = MATHS)) +
  geom_histogram(bins=10, 
                 boundary = 100,
                 color="black", 
                 fill="grey") +
  ggtitle("Distribution of Maths scores")
```
:::

## Grammar of Graphics

Before getting started using ggplot2, it is important to understand the principles of Grammer of Graphics.

Grammar of Graphics is a general scheme for data visualization which breaks up graphs into semantic components such as scales and layers. It was introduced by Leland Wilkinson in 1999 Grammar of Graphics, Springer. The grammar of graphics is an answer to a question:

What is a statistical graphic?

In the nutshell, Grammar of Graphics defines the rules of structuring mathematical and aesthetic elements into a meaningful graph.

There are two principles in Grammar of Graphics, they are:

-   Graphics = distinct layers of grammatical elements
-   Meaningful plots through aesthetic mapping

A good grammar of graphics will provide insight into the composition of complicated graphics, and reveal unexpected connections between seemingly different graphics (Cox 1978). It also provides a strong foundation for understanding a diverse range of graphics. Furthermore, it may provide guidance on what a well-formed or correct graphic looks like, but there could still be many grammatically correct but nonsensical graphics.

### Layered Grammar of Graphics

ggplot2 is an implementation of Leland Wilkinson's Grammar of Graphics. There are 7 layers of grammar, aka Essential Grammatical Elements, described as follows.

-   **Data**: The dataset being plotted.
-   **Aesthetics**: take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.
-   **Geometrics**: The visual elements used for our data, such as point, bar or line.
-   **Facets**: splits the data into subsets to create multiple variations of the same graph (paneling, multiple plots).
-   **Statistics**: statistical transformations that summarise data (e.g. mean, confidence intervals).
-   **Coordinate systems**: define the plane on which data are mapped on the graphic.
-   **Themes**: modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background.

### GGPlot2 Essential Grammatical Elements: Data

With ggplot() a blank canvas for the data visualisation can be first intialised, as shown in the following code chunk.

```{r}
ggplot(data=exam_data)
```

### GGPlot2 Essential Grammatical Elements: Aesthetics mappings

Aesthetic mappings utilises attributes of the data and and use them to influence visual characteristics, such as position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.

All aesthetics of a plot are specified in the aes() function call (each geom layer can have its own aes specification)

The code chunk below illustrates the use of aes() to add a simple aesthetic element (the x axis and label) into the plot.

```{R}
ggplot(data=exam_data, 
       aes(x= MATHS))
```

### GGPlot2 Essential Grammatical Elements: Geometrics

Geometric objects are the centerpiece graphical marks placed on a plot. Examples include:

-   geom_point for drawing individual points (e.g., a scatter plot)
-   geom_line for drawing lines (e.g., for a line charts)
-   geom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)
-   geom_bar for drawing bars (e.g., for bar charts)
-   geom_histogram for drawing binned values (e.g. a histogram)
-   geom_polygon for drawing arbitrary shapes
-   geom_map for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).

#### Geometric object: Bar charts

The code chunk below plots a bar chart by using geom_bar().

```{R}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar()
```

#### Geometric object: Dotplot

In a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.

In the code chunk below, geom_dotplot() of ggplot2 is used to plot a dot plot.

```{R}
ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot(dotsize = 0.5)
```
Rather than auto-assignment, the bin width could also be specified. 

Since each dot represents 1 observation, the y-axis is not meaningful and becomes misleading instead.

To address the above, the code chunk specifies the bin width, and also removes the y-axis using scale_y_continuous().

```{R}
ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot(binwidth=2.5,         
               dotsize = 0.5) +      
  scale_y_continuous(NULL,           
                     breaks = NULL) 
```

#### Geometric object: Histograms

In the code chunk below, geom_histogram() is used to create a simple histogram by using values in MATHS field of exam_data.

```{R}
ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_histogram()
```

#### Geometric object modification: geom()

In the code chunk below,

-   bins argument is used to change the number of bins to 20,
-   fill argument is used to shade the histogram with light blue color, and
-   color argument is used to change the outline colour of the bars in black

```{R}
ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20,            
                 color="black",      
                 fill="light blue")  
```

#### Geometric object modification: aes()

The code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of aesthetic().

```{R}
ggplot(data=exam_data, 
       aes(x= MATHS, 
           fill = GENDER)) +
  geom_histogram(bins=20, 
                 color="grey30")
```

#### Geometric object: Density
#### Geometric object: Boxplot
#### Geometric object: Violin
#### Geometric object: Points
#### Geometric object: combination



### GGPlot2 Essential Grammatical Elements: Statistics


### GGPlot2 Essential Grammatical Elements: Facets


### GGPlot2 Essential Grammatical Elements: Coordinate systems


### GGPlot2 Essential Grammatical Elements: Themes


## References