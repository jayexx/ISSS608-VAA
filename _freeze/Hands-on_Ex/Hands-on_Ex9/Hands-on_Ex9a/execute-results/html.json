{
  "hash": "e470dc9b44fde1c5da7da8a620696099",
  "result": {
    "markdown": "---\ntitle: \"Hands-on Ex9a\"\nauthor: \"Jayexx\"\ndate: \"June 13, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n# Creating Ternary Plot with R\n\n## Overview\n\nTernary plots are a way of displaying the distribution and variability of three-part compositional data. (For example, the proportion of aged, economy active and young population or sand, silt, and clay in soil.) It’s display is a triangle with sides scaled from 0 to 1. Each side represents one of the three components. A point is plotted so that a line drawn perpendicular from the point to each leg of the triangle intersect at the component values of the point.\n\nThe key learning objective of this hands-on exercise is to build ternary plot programmatically using R for visualising and analysing population structure of Singapore..\n\nThe hands-on exercise consists of 4 steps:\n\n-   Install and launch tidyverse and ggtern packages.\n-   Derive 3 new measures using mutate() function of dplyr package.\n-   Build a static ternary plot using ggtern() function of ggtern package.\n-   Build an interactive ternary plot using plot-ly() function of Plotly R package.\n\n## Getting Started\n\nFor this exercise, two main R packages will be used in this hands-on exercise, they are:\n\n-   ggtern, a ggplot extension specially designed to plot ternary diagrams. The package will be used to plot static ternary plots.\n-   Plotly R, an R package for creating interactive web-based graphs via plotly’s JavaScript graphing library, plotly.js . The plotly R libary contains the ggplotly function, which will convert ggplot2 figures into a Plotly object.\n\nSelected tidyverse family packages namely: readr, dplyr and tidyr also needs to be installed and loaded.\n\nIn this exercise, version 3.2.1 of ggplot2 will be installed instead of the latest version of ggplot2. This is because the current version of ggtern package is not compatible to the latest version of ggplot2.\n\nThe code chunks below will accomplish the task.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman:: p_load(plotly, ggtern, tidyverse)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\npackage 'tensorA' successfully unpacked and MD5 sums checked\npackage 'bayesm' successfully unpacked and MD5 sums checked\npackage 'compositions' successfully unpacked and MD5 sums checked\npackage 'latex2exp' successfully unpacked and MD5 sums checked\npackage 'proto' successfully unpacked and MD5 sums checked\npackage 'hexbin' successfully unpacked and MD5 sums checked\npackage 'ggtern' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n\tC:\\Users\\lowji\\AppData\\Local\\Temp\\RtmpeG4ci2\\downloaded_packages\n```\n:::\n:::\n\n\n## Data Preparation\n\n### The data\n\nFor the purpose of this hands-on exercise, the Singapore Residents by Planning AreaSubzone, Age Group, Sex and Type of Dwelling, June 2000-2018 data will be used. The data set has been downloaded and included in the data sub-folder of the hands-on exercise folder. It is called respopagsex2000to2018_tidy.csv and is in csv file format.\n\n### Importing Data\n\nTo import respopagsex2000to2018_tidy.csv into R, read_csv() function of readr package will be used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Reading the data into R environment\npop_data <- read_csv(\"data/respopagsex2000to2018_tidy.csv\") \n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}