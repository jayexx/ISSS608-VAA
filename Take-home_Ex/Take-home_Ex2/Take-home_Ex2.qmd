---
title: "Take-home Ex2"
author: "Jayexx Low"
date: "April 29, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

## Introduction

As a follow on to the previous study on Singapore's private property market, this exercise would entail a closer scrutiny on the Data Visualisation (DataViz) done. For which, one DataViz will be selected, and critiqued based on (a) clarity and (b) aesthetics. Consequently recommendations for an alternative design will be proposed, employing data visualisation design principles and best practices, in order to remake the original design by using ggplot2, ggplot2 extensions and tidyverse packages.

## Getting Started

### Loading Required R Package Libraries

The code chunk below loads the following libraries:

-   tidyverse: an amalgamation of libraries for data handling (including ggplot2, dplyr, tidyr, readr, tibble)
-   knitr: for creating dynamic html tables/reports
-   ggridges: extension of ggplot2 designed for plotting ridgeline plots
-   ggdist: extension of ggplot2 designed for visualising distribution and uncertainty,
-   colorspace: provides a broad toolbox for selecting individual colors or color palettes, manipulating these colors, and employing them in various kinds of visualisations.
-   ggrepel: provides geoms for ggplot2 to repel overlapping text labels.
-   ggthemes: provides additional themes, geoms, and scales for ggplot package
-   hrbrthemes: provides typography-centric themes and theme components for ggplot package
-   patchwork: preparing composite figure created using ggplot package
-   lubridate: for wrangling of date-time data
-   ggstatplot: provides alternative statistical inference methods by default as an extension of the ggplot2 package
-   plotly: R library for plotting interactive statistical graphs.

```{r}
pacman::p_load(tidyverse, knitr, ggridges, ggdist, colorspace, ggrepel, ggthemes, hrbrthemes, patchwork, lubridate, ggstatsplot, plotly) 
```

### Importing the Data

The code chunk below imports 5 quarters of Private Residential Transaction data into R environment by using read_csv() function of readr package, which is part of the tidyverse package.

```{r}
Realis24Q1 <- read_csv("data/ResidentialTrx2024q1.csv")
Realis23Q4 <- read_csv("data/ResidentialTrx2023q4.csv")
Realis23Q3 <- read_csv("data/ResidentialTrx2023q3.csv")
Realis23Q2 <- read_csv("data/ResidentialTrx2023q2.csv")
Realis23Q1 <- read_csv("data/ResidentialTrx2023Q1.csv")
```

## Selected DataViz

For this exercise, the selected DataViz is the [***Comparison of Transacted prices by Type of Sale Between Q1 of 2023 and 2024***]{.underline}, which can be accessed in the following [link](https://peishan0502-isss608.netlify.app/take-home_ex/take-home_ex01/take-home_ex01#compare-transacted-price-by-type-of-sale), and shown in the figure below..

![](images/unnamed-chunk-28-1.png)

Of note, the accompanying explanation for the DataViz covered the following points:

-   Firstly, based on the code chunk used, the initial box plot plotted the 'Transacted Price (\$)' in the y-axis against the 'Type of Sale' in the x-axis, for transaction data in each of the 1st quarters of 2023 and 2024.

-   However, since the box plots for both time periods 'looked very squished', 2 extreme outliers were excluded for each plot, and finally both plots were compiled side by side, to give the final DataViz figure above.

-   The analysis made gave the following insights:

    -   In 2024 Q1, the median transacted price for resale is slightly lower than that of new sale, whereas, the range of prices for resale is larger as compared to new sale or sub sale, as shown by its larger interquartile range (IQR).

    -   Similar to 2024 Q1, 2023 Q1 box plot shows the median transacted price is lower for resale as compared to new sale, whereas, the IQR of transacted prices of resale and new sale are similar, and that of sub sale is much smaller this time.

### Performing Relevant Data Preparation

```{r}
Realis_Q1merged <- rbind(Realis24Q1, Realis23Q1)

# Convert Sale date to date data type
Realis_Q1merged$`Sale Date` <- dmy(Realis_Q1merged$`Sale Date`)

Realis_Q1merged <- Realis_Q1merged %>%
  mutate(Quarter = case_when(
    between(month(`Sale Date`), 1, 3) & year(`Sale Date`) == 2023 ~ "2023Q1",
    between(month(`Sale Date`), 1, 3) & year(`Sale Date`) == 2024 ~ "2024Q1",
    TRUE ~ NA_character_
  ))

glimpse(Realis_Q1merged)
```

## Critique on Selected DataViz

### On Clarity

-   Issue #1: Poor logic in removing outliers and misleading representation of prices since the data points for multiple-unit transactions were included in the price comparison, which gives an unfair comparison against single-unit transactions
-   Issue #2: Near impossible to read and compare the position of the median and IQR, due to (a) the wide tick intervals in the y-axis and gridlines and (b) the extremely compressed box plot as the outliers took up majority of the plot even after excluding some data points
-   Issue #3: Misalignment of y-axis impeding the comparison between the 2 box plots
-   Issue #4: Arrangement of the boxplots by quarters impeding the comparison of sub-market components (3 types of sales) between the 2 quarters
-   Issue #5: Skewness of distribution which could be a useful basis for comparison of transacted price was not clearly illustrated with the box plot

### On Aesthetics

-   Issue #6: The theme and colour scheme was left to default, which hence did not leverage on any colours to enhance the DataViz such as differentiating the different Type of Sales, or to bring attention to the key areas of analysis such as the median and IQR in this case
-   Issue #7: Given the compressed box-plot, the figure size could be enhanced by rotating coordinates and increasing the width to follow the horizontal rectangular convention of graphical plots
-   Issue #8: Remove superfluous tick marks on the categorical scale

## Recommended Makeover

To address the aforesaid critique, the following alternatives are suggested

### 1. Reassess outliers and Re-clean Data

This is meant to address issues #1 and potentially #2 and #7, by choosing 1 of the following options:

\(a\) Exclude all multiple-unit transactions as outliers,

\(b\) Use PSF instead of Transacted Price, or

\(c\) Derive a new variable Price per unit by dividing the variable 'Transacted price (\$)' by the variable 'Number of Units'

To consider if it is meaningful for option (a), a uni-variate analysis on number of units is first done in the following code chunk.

```{R}
#| code-fold: true

# Calculate frequency counts for each value of "Number of Units"
freq_counts <- Realis_Q1merged %>%
  count(`Number of Units`)

# Plot the histogram and Display frequency counts as text
ggplot(data = Realis_Q1merged, aes(x = `Number of Units`)) +
  geom_histogram() +
  geom_text(data = freq_counts, aes(label = n, y = n), vjust = -0.5) +
  labs(x = "Number of Units", y = "Frequency")
```

Using the following code chunk, the Project Names for the multiple-unit transactions are extracted.

```{r}
subset_df <- subset(Realis_Q1merged, `Number of Units` > 1, select = c("Project Name", "Number of Units"))
subset_df
```

Based on the above, it is found that out of 9.6k rows, only 5 rows contain multiple-unit transaction. For which, Bagnall court and Meyer Park were found to be en bloc sales, and including the rest, amounts to slightly over just 1% of the total units transacted. Hence it seems reasonable to exclude these data points in lieu that there could be different factors affecting the transaction prices and hence will need to be explored separately instead. The data cleaning is hence done in the following code chunk

```{r}
# Filter out the multiple-unit transactions as outliers
Realis_Q1merged <- Realis_Q1merged %>% filter(`Number of Units` <= 1)
```

### 2. Synchronise box plots' axes, visualise same category side by side and enable zoom into box plot to compare summary stats

This is meant to address issues #2, #3, #4, #6 & #7, by employing 1 of the following options in the DataViz makeover:

\(a\) facet_grid or facet_wrap

\(b\) Coordinated Multiple Views with ggiraph

\(c\) Interactive Box plot with ggplotly()

Going with (c) as potentially the simplest option, a revised DataViz with Coordinated Multiple views with ggplotly() is plotted with the following code chunk.

```{r}
#| fig-width: 12

# Convert transacted price to millions
Realis_Q1merged <- Realis_Q1merged %>%
  mutate(`Transacted Price ($ Million)` = `Transacted Price ($)` / 1e6)

# Define the order of combined factor
Realis_Q1merged$Type_Quarter <- factor(paste(Realis_Q1merged$`Type of Sale`, Realis_Q1merged$Quarter), 
                                       levels = c("New Sale 2023Q1", "New Sale 2024Q1", "Resale 2023Q1", "Resale 2024Q1", "Sub Sale 2023Q1", "Sub Sale 2024Q1"))

# Create box plots for each combination of Type of Sale and Quarter
p <- ggplot(data = Realis_Q1merged, aes(x = Type_Quarter, y = `Transacted Price ($ Million)`, fill = factor(Quarter))) +
  geom_boxplot() +
  labs(x = "Type of Sale and Quarter", y = "Transacted Price ($ Million)") +
  ggtitle("Box Plot of Transacted Price by Type of Sale and Quarter") +
  coord_flip() + # Rotate the plot horizontally
  scale_y_continuous(labels = function(x) paste0(x, "M"), breaks = seq(0, max(Realis_Q1merged$`Transacted Price ($ Million)`), by = 2)) +
  theme(legend.position = "none")

# Convert ggplot object to plotly
ggplotly(p)
```

In the revised DataViz above, side-by-side comparison can now be done, with the box plot color fill differentiating between 2023Q1 and 2024Q1. And to further address the compressed box plot due to the long tail of outliers, the interactive ggplotly() function allows zooming in. Furthermore, the axes are flipped with x-axis tick intervals (for transaction prices) adjusted to \$2 million, along with the addition of data labels for the median, IQR, min and max. These significantly enhances the visualisation in terms of clarity and aesthetics for the differences between the Sales Type between Q1 of 2023 and 2024.

### 3. Clearer indication of skewness of distribution and removal of tick marks for categorial variable

This is meant to address the remaining issues #5 & #8, by employing 1 of the following options in the DataViz makeover:

\(a\) display mean as a red dot on box plot

\(b\) use violin plot with median and mean

\(c\) two sample mean test using gg between stats

Going with (a) as the simplest option, a revised DataViz to add the indication of the mean and clean up the plot by removing the tick marks for categorical variable is plotted with the following code chunk.

```{R}
#| fig-width: 12

# Create box plots for each combination of Type of Sale and Quarter
p <- ggplot(data = Realis_Q1merged, aes(x = Type_Quarter, y = `Transacted Price ($ Million)`, fill = factor(Quarter))) +
  geom_boxplot() +
  stat_summary(fun = mean, geom = "point", shape = 20, size = 1.5, color = "blue",
               position = position_dodge(width = 0.75)) +
  labs(x = "Type of Sale and Quarter", y = "Transacted Price ($ Million)") +
  ggtitle("Box Plot of Transacted Price by Type of Sale and Quarter") +
  coord_flip() + # Rotate the plot horizontally
  scale_y_continuous(labels = function(x) paste0(x, "M"), breaks = seq(0, max(Realis_Q1merged$`Transacted Price ($ Million)`), by = 2)) +
  theme(axis.ticks.y = element_blank(),
        legend.position = "none")

# Convert ggplot object to plotly
ggplotly(p, tooltip = c("y"))


```

With the latest version of the DataViz makeover above, the mean is illustrated with the red circle, and the value can also be read from the tooltip upon mouse over the point. With the mean, the skewness of the plot can be determined based on whether the mean is smaller than (left skew) larger than (right skew) or equal (centralized) to the median. Last but not least, the tick marks for the categorical variable which is unnecessary has also been removed.

Converting to an interactive violin plot further enables the distribution to be visualised and compared, while keeping the labels for the mean and median as red and black circles respectively, however the code would increase in complexity significantly to still include the quartile, as see in the code chunk below.

```{R}
#| fig-width: 12
#| fig-height: 15
# Create violin plots for each combination of Type of Sale and Quarter
p <- ggplot(data = Realis_Q1merged, aes(x = Type_Quarter, y = `Transacted Price ($ Million)`, fill = factor(Quarter))) +
  geom_violin(trim = FALSE, alpha = 0.7, width = 0.8) + # Adjust width of violins
  stat_summary(fun = mean, geom = "point", shape = 20, size = 1.5, color = "blue",
               position = position_dodge(width = 0.75), aes(label = paste("Mean Transaction Price = ", round(..y.., 2))), show.legend = FALSE) +
  stat_summary(fun = median, geom = "point", shape = 20, size = 1.5, color = "black",
               position = position_dodge(width = 0.75), aes(label = paste("Median Transaction Price = ", round(..y.., 2))), show.legend = FALSE) +
  stat_summary(fun = function(x) quantile(x, 0.25), geom = "segment", aes(x = Type_Quarter, xend = Type_Quarter, yend = ..y..), position = position_dodge(width = 0.75), color = "blue", show.legend = FALSE) +
  stat_summary(fun = function(x) quantile(x, 0.75), geom = "segment", aes(x = Type_Quarter, xend = Type_Quarter, yend = ..y..), position = position_dodge(width = 0.75), color = "blue", show.legend = FALSE) +
  labs(x = "Type of Sale and Quarter", y = "Transacted Price ($ Million)", fill = NULL) +
  ggtitle("Violin Plot of Transacted Price by Type of Sale and Quarter") +
  scale_y_continuous(labels = function(x) paste0(x, "M"), breaks = seq(0, max(Realis_Q1merged$`Transacted Price ($ Million)`), by = 2),
                     limits = c(0, max(Realis_Q1merged$`Transacted Price ($ Million)`))) +
  theme(axis.ticks.y = element_blank(),
        legend.position = "none")

# Convert ggplot object to plotly
ggplotly(p, tooltip = c("y"))
```
